# -*- coding: utf-8 -*-
"""Uv-Temprature Testing Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13p_RUxU2Ee0PtKzKAWgSgrHNP--DdKZH
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import math 
from tensorflow import keras

from google.colab import drive
drive.mount('/gdrive')

"""Uv-Model Testing"""

UvModel = tf.keras.models.load_model('/gdrive/MyDrive/saved_model/UvRadiation2')
# Check its architecture
UvModel.summary()

cobacoba3 = np.random.randint(20,150,27) #random numbers for forecasting uv

#predicting UV
window_size=24
def model_forecast(model, series, window_size):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size))
    ds = ds.batch(32).prefetch(1)
    forecast = model.predict(ds)
    return forecast

def cvrttolist (listy) : 
  return listy.tolist()
def extenddf(df,forecast):
  a= cvrttolist(df)
  b=cvrttolist(forecast)
  a.extend(b)
  return np.array(a) 


def forecastuv (df, hour):
  for nextuv in range(hour) :
    lstm_forecast2 = model_forecast(UvModel, df[..., np.newaxis], window_size)
    lstm_forecast2 = lstm_forecast2[((len(df)-1) - window_size):-1, -1, 0]
    df=extenddf(df,lstm_forecast2)

    lstm_forecast2 = model_forecast(UvModel, df[..., np.newaxis], window_size)
    lstm_forecast2 = lstm_forecast2[((len(df))-1 - window_size):-1, -1, 0]
    df = extenddf(df,lstm_forecast2)

    df=cvrttolist(df)
    a=df[-2]
    df.remove(a)
    df=np.array(df)

  return cvrttolist(df[-hour:])

def maketotableuv(thelist):
  frames = {  "Hour Forecast":list(range(1,(len(thelist)) +1 ))  ,"UV-Forecast" :thelist   }
  dfforecast = pd.DataFrame(frames)
  return (dfforecast)


maketotableuv(forecastuv(cobacoba3,4))

"""### TEMPRATURE Model Testing"""

Temprature = tf.keras.models.load_model('/gdrive/MyDrive/saved_model/Temprature')
# Check its architecture
Temprature.summary()

cobacoba2 = np.random.randint(25,35,70) #random trial dataset for temprature
cobacoba2

def cvrttolist (listy) : 
  return listy.tolist()
def extenddf(df,forecast):
  a= cvrttolist(df)
  b=cvrttolist(forecast)
  a.extend(b)
  return np.array(a) 
  
def model_forecast(model, series, window_size):
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size))
    ds = ds.batch(32).prefetch(1)
    forecast = model.predict(ds)
    return forecast

    
def forecasttemprature (df, hour):
  temp = [] 
  for nexttemprature in range(hour) :
    lstm_forecast2 = model_forecast(Temprature, df[..., np.newaxis], window_size)
    lstm_forecast2 = lstm_forecast2[((len(df)-1) - window_size):-1, -1, 0]
    df=extenddf(df,lstm_forecast2)
  
    lstm_forecast2 = model_forecast(Temprature, df[..., np.newaxis], window_size)
    lstm_forecast2 = lstm_forecast2[((len(df)-1) - window_size):-1, -1, 0]
    df=extenddf(df,lstm_forecast2)

    df=cvrttolist(df)
    a=df[-2]
    df.remove(a)
    df=np.array(df)

  return cvrttolist(df[-hour:])

def maketotabletemprature(thelist):
  frames = {  "Hour Forecast":list(range(1,(len(thelist)) +1 ))  ,"Temprature-Forecast" :thelist   }
  dfforecast = pd.DataFrame(frames)
 
  return (dfforecast)

temporarydataframe = maketotabletemprature( forecasttemprature(cobacoba2,24))